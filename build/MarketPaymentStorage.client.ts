/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.9.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import {Addr, InstantiateMsg, ExecuteMsg, PaymentExecuteMsg, AssetInfo, Payment, UpdateContractMsg, QueryMsg, PaymentQueryMsg, Binary, ContractInfo} from "./MarketPaymentStorage.types";
export interface MarketPaymentStorageReadOnlyInterface {
  contractAddress: string;
  getMsg: (paymentQueryMsg: PaymentQueryMsg) => Promise<Binary>;
  getContractInfo: () => Promise<ContractInfo>;
}
export class MarketPaymentStorageQueryClient implements MarketPaymentStorageReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getMsg = this.getMsg.bind(this);
    this.getContractInfo = this.getContractInfo.bind(this);
  }

  getMsg = async (paymentQueryMsg: PaymentQueryMsg): Promise<Binary> => {
    return this.client.queryContractSmart(this.contractAddress, {
      msg: paymentQueryMsg
    });
  };
  getContractInfo = async (): Promise<ContractInfo> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_contract_info: {}
    });
  };
}
export interface MarketPaymentStorageInterface extends MarketPaymentStorageReadOnlyInterface {
  contractAddress: string;
  sender: string;
  msg: (paymentExecuteMsg: PaymentExecuteMsg, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateInfo: ({
    creator,
    defaultDenom,
    governance
  }: {
    creator?: Addr;
    defaultDenom?: string;
    governance?: Addr;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class MarketPaymentStorageClient extends MarketPaymentStorageQueryClient implements MarketPaymentStorageInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.msg = this.msg.bind(this);
    this.updateInfo = this.updateInfo.bind(this);
  }

  msg = async (paymentExecuteMsg: PaymentExecuteMsg, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      msg: paymentExecuteMsg
    }, _fee, _memo, _funds);
  };
  updateInfo = async ({
    creator,
    defaultDenom,
    governance
  }: {
    creator?: Addr;
    defaultDenom?: string;
    governance?: Addr;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_info: {
        creator,
        default_denom: defaultDenom,
        governance
      }
    }, _fee, _memo, _funds);
  };
}